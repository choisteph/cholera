% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nearestPump.R
\name{nearestPump}
\alias{nearestPump}
\title{Compute shortest distances or paths to selected pumps.}
\usage{
nearestPump(pump.select = NULL, metric = "walking", vestry = FALSE,
  weighted = TRUE, case.set = "observed", distance.unit = "meter",
  time.unit = "second", walking.speed = 5, multi.core = FALSE,
  dev.mode = FALSE)
}
\arguments{
\item{pump.select}{Numeric. Pump candidates to consider. Default is \code{NULL}: all pumps are used. Otherwise, selection by a vector of numeric IDs: 1 to 13 for \code{pumps}; 1 to 14 for \code{pumps.vestry}. Negative selection allowed.}

\item{metric}{Character. "eucldidean" or "walking".}

\item{vestry}{Logical. \code{TRUE} uses the 14 pumps from the Vestry Report. \code{FALSE} uses the 13 in the original map.}

\item{weighted}{Logical. \code{TRUE} computes shortest path in terms of road length. \code{FALSE} computes shortest path in terms of the number of nodes.}

\item{case.set}{Character. "observed", "expected", or "snow".}

\item{distance.unit}{Character. Unit of distance: "meter", "yard" or "native". "native" returns the map's native scale. Meaningful only when "weighted" is \code{TRUE}. See \code{vignette("roads")} for information on unit distances.}

\item{time.unit}{Character. "hour", "minute", or "second".}

\item{walking.speed}{Numeric. Walking speed in km/hr.}

\item{multi.core}{Logical or Numeric. \code{TRUE} uses \code{parallel::detectCores()}. \code{FALSE} uses one, single core. You can also specify the number logical cores.}

\item{dev.mode}{Logical. Development mode uses parallel::parLapply().}
}
\value{
An R data frame or list of 'igraph' path nodes.
}
\description{
Compute shortest distances or paths to selected pumps.
}
\note{
This function is computationally intensive. On a single core of a 2.3 GHz Intel i7, for walking distance, computing the nearest pump for observed cases takes takes 2.4 seconds while doing so for expected cases takes about 344 seconds; for Euclidean distnace, computing the nearest pump for observed cases takes takes 3.0 seconds and 104 seconds for expected cases. Using the parallel implementation on 4 physical (8 logical) cores, these times fall to about 1.8 and 90 seconds for walking distances; 0.9 and 25 seconds for Euclidean distances. Note that although some precautions are taken in R.app on macOS, the developers of the 'parallel' package strongly discourage against using parallelization within a GUI or embedded environment. See \code{vignette("parallel")} for details. Time is computed using \code{distanceTime()}.
}
